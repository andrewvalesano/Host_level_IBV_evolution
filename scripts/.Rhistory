df %>% ggplot() + geom_histogram(aes(x=y, stat="density"),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, stat="density"),fill="red", color = "black", alpha = 0.5) + geom_bar(aes(y=pdf))
df %>% ggplot() + geom_histogram(aes(x=y),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p),fill="red", color = "black", alpha = 0.5) + geom_bar(aes(y=pdf))
df %>% ggplot() + geom_histogram(aes(x=y),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p),fill="red", color = "black", alpha = 0.5) #+ geom_bar(aes(y=pdf))
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) #+ geom_bar(aes(y=pdf))
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) + geom_bar(aes(y=pdf))
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) + geom_bar(aes(x=pdf_x, y=pdf))
Pois_sim <- rpois(n = N, lambda = N*(b-a))
Pois_distribution <- c()
for(n in seq(1, N, by=1))
{
pois <- dpois(x=n, lambda = N*(b-a))
Pois_distribution <- c(Pois_distribution, pois)
}
data.frame(y=Y_vector, p=Pois_sim, pdf=Pois_distribution, pdf_x=seq(1, N, by=1)) -> df
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) + geom_bar(aes(x=pdf_x, y=pdf))
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) #+ geom_bar(aes(x=pdf_x, y=pdf))
df %>% ggplot() + geom_bar(aes(x=pdf_x, y=pdf))
Pois_distribution
df %>% ggplot() + geom_histogram(aes(x=pdf_x, y=pdf))
df$pdf_x
df$pdf
df %>% ggplot() + geom_bar(aes(x=pdf_x, y=pdf))
df %>% ggplot() + geom_bar(aes(x=pdf_x, y=pdf),stat='identity',color=NA,fill=gray(0.4))
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) + geom_bar(aes(x=pdf_x, y=pdf), stat='identity', color=NA, fill=gray(0.4))
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) #+ geom_bar(aes(x=pdf_x, y=pdf), stat='identity', color=NA, fill=gray(0.4))
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) + expand_limits(x=c(400,600)) #+ geom_bar(aes(x=pdf_x, y=pdf), stat='identity', color=NA, fill=gray(0.4))
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) + expand_limits(x=c(400,600)) + geom_bar(aes(x=pdf_x, y=pdf), stat='identity', color=NA, fill=gray(0.4))
df %>% ggplot() + geom_bar(aes(x=pdf_x, y=pdf),stat='identity',color=NA,fill=gray(0.4))
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) + expand_limits(x=c(400,600)) + geom_bar(aes(x=pdf_x, y=pdf), stat='identity', color=NA, fill=gray(0.4))
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) + geom_bar(aes(x=pdf_x, y=pdf), stat='identity', color=NA, fill=gray(0.4)) + expand_limits(x=c(400,600))
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) + geom_bar(aes(x=pdf_x, y=pdf), stat='identity', color=NA, fill=gray(0.4)) + xlim(400, 600)
df %>% ggplot() + geom_histogram(aes(x=y),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p),fill="red", color = "black", alpha = 0.5)
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_histogram(aes(x=p, , y=..density..),fill="red", color = "black", alpha = 0.5) + geom_bar(aes(x=pdf_x, y=pdf), stat='identity', color="black", fill="red", alpha=0.5) + xlim(400, 600)
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_bar(aes(x=pdf_x, y=pdf), stat='identity', color="black", fill="red", alpha=0.5) + xlim(400, 600)
df %>% ggplot() + geom_histogram(aes(x=y, y=..density..),fill="grey", color = "black", alpha=0.5) + theme_bw() + geom_bar(aes(x=pdf_x, y=pdf), stat='identity', color=NA, fill="red", alpha=0.5) + xlim(400, 600)
install.pacj
install.packages("gamlss")
as.list(coef(fit_power)
)
knitr::opts_chunk$set(echo = TRUE)
options(warn=-1)
library(readr)
library(magrittr)
library(ggplot2)
library(tidyverse)
read_csv("https://kinglab.eeb.lsa.umich.edu/480/data/gophertortoise.csv",
comment="#",col_types=cols(date="D",sex="c",elisa="c")) -> gt
gt
gt1 %>%
mutate(
pred=predict(fit,newdata=gt1),
out.of.fit=(date>"2005-01-01")
) -> gt1
gt %>%
group_by(id) %>%
filter(date==min(date)) %>%
ungroup() -> gt1
gt1
gt1 %>%
mutate(
pred=predict(fit,newdata=gt1),
out.of.fit=(date>"2005-01-01")
) -> gt1
gt1 %>%
mutate(
serostatus=ifelse(elisa=="neg",0,1)
) -> gt1
loglik <- function (p, serostatus) {
sum(dbinom(x=serostatus,size=1,prob=p,log=TRUE))
}
library(bbmle)
expit <- function (x) 1/(1+exp(-x))
nll <- function (a, b, carapace.length, serostatus) {
ll <- loglik(p=expit(a+b*carapace.length),serostatus)
if (is.finite(ll)) -ll else 1e20
}
fit <- mle2(nll,start=list(a=0,b=0),data=gt1)
gt1 %>%
mutate(
pred=predict(fit,newdata=gt1),
out.of.fit=(date>"2005-01-01")
) -> gt1
gt1 %>%
mutate(
pred=predict(fit,newdata=gt1),
out.of.fit=(carapace.length>240)
) -> gt1
gt1 %>%
mutate(
pred=predict(fit,newdata=gt1),
out.of.fit=(carapace.length>240)
) -> gt1
gt1 %>%
mutate(
pred=fitted(fit,newdata=gt1),
out.of.fit=(carapace.length>240)
) -> gt1
gt1 %>%
mutate(
pred=with(as.list(coef(fit)),expit(a+b*carapace.length)),
out.of.fit=(carapace.length>240)
) -> gt1
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=fitted),color='black') + theme_bw() + geom_line(aes(y=fitted),color='black')
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=fitted),color='black') + theme_bw() + geom_line(aes(y=pred),color='black')
head(gt1)
t1 %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=fitted),color='black') + theme_bw() + geom_line(aes(y=pred),color='black') + facet_grid(~out.of.fit,labeller=label_both)
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=fitted),color='black') + theme_bw() + geom_line(aes(y=pred),color='black') + facet_grid(~out.of.fit,labeller=label_both)
head(gt1)
gt1 %>%
mutate(
fitted=with(as.list(coef(fit)),expit(a+b*carapace.length))
) -> gt1
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=fitted),color='black') + theme_bw() + geom_line(aes(y=pred),color='black') + facet_grid(~out.of.fit,labeller=label_both)
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=fitted),color='black') + theme_bw() + geom_line(aes(y=pred),color='black') + facet_grid(~out.of.fit,labeller=label_both) -> pl
pl
gt1 %>%
mutate(
pred=with(as.list(coef(fit)),expit(a+b*carapace.length)),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=fitted),color='black') + theme_bw() + geom_line(aes(y=pred),color='black') + facet_grid(~out.of.fit,labeller=label_both) -> pl
pl
gt1 %>%
group_by(out.of.fit) %>%
summarize(
R2=1-sum((fitted-pred)^2)/sum((fitted-mean(fitted))^2)
)
pl
gt1 %>%
mutate(
pred=fitted(fit),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
mutate(
pred=predict(fit, newdata=gt1),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
mutate(
pred=predict(fit, newdata=gt1, type="response"),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
mutate(
pred=fitted(fit),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
ggplot(mapping=aes(x=pred,y=fitted))+
geom_point()+
facet_grid(~out.of.fit,labeller=label_both)+
geom_abline(intercept=0,slope=1)+theme_bw() -> pl2
pl2
gt1 %>%
group_by(out.of.fit) %>%
summarize(
R2=1-sum((fitted-pred)^2)/sum((fitted-mean(fitted))^2)
)
gt1 %>%
mutate(
pred=predict(fit, newdata=gt1, type="response"),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
fit
gt1 %>%
mutate(
pred=predict(fit, newdata=gt1, type="response"),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
mutate(
pred=predict(fit, newdata=gt1, type="expected"),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
mutate(
pred=predict(fit, newdata=filter(gt1, out.of.fit==FALSE), type="expected"),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
mutate(
pred=predict(fit, newdata=gt1, type="response"),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
mutate(
serostatus=ifelse(elisa=="neg",0,1)
) -> gt1
loglik <- function (p, serostatus) {
sum(dbinom(x=serostatus,size=1,prob=p,log=TRUE))
}
library(bbmle)
expit <- function (x) 1/(1+exp(-x))
nll <- function (a, b, carapace.length, serostatus) {
ll <- loglik(p=expit(a+b*carapace.length),serostatus)
if (is.finite(ll)) -ll else 1e20
}
fit <- mle2(nll,start=list(a=0,b=0),data=gt1)
fit
summary(fit)
gt1 %>%
mutate(
pred=predict.glm(fit, newdata=gt1, type="response"),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
mutate(
pred=predict(fit),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
library(bbmle)
gt1 %>%
mutate(
pred=predict(fit),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
mutate(
pred=predict(fit, newdata=gt1),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
library(bbmle)
gt1 %>%
mutate(
pred=predict(fit, newdata=gt1),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
mutate(
pred=bbmle::predict(fit, newdata=gt1),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
library(tidyverse)
library(bbmle)
predict()
bbmle::predict()
gt1 %>%
mutate(
pred=predict(fit),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
predict(fit)
gt %>%
group_by(id) %>%
filter(date==min(date)) %>%
ungroup() -> gt1
gt1
gt1 %>%
mutate(
serostatus=ifelse(elisa=="neg",0,1)
) -> gt1
loglik <- function (p, serostatus) {
sum(dbinom(x=serostatus,size=1,prob=p,log=TRUE))
}
library(bbmle)
expit <- function (x) 1/(1+exp(-x))
nll <- function (a, b, carapace.length, serostatus) {
ll <- loglik(p=expit(a+b*carapace.length),serostatus)
if (is.finite(ll)) -ll else 1e20
}
fit <- mle2(nll,start=list(a=0,b=0),data=gt1)
coef(fit)
logLik(fit)
summary(fit)
fit_profile <- profile(fit)
plot(fit_profile)
confint(fit_profile)
gt1 %>%
mutate(
fitted=with(as.list(coef(fit)),expit(a+b*carapace.length))
) -> gt1
gt1 %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=fitted),color='black') + theme_bw()
predict(fit)
bbmle::predict(fit)
require(bbmle)
predict(fit)
predict(fit)
fitted(fit)
residuals(fit)
gt1 %>%
mutate(
pred=predict(fit, op="predict"),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
predict(fit)
fit
str(fit)
gt1 %>%
mutate(
pred=with(as.list(coef(fit)),expit(a+b*carapace.length)),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1 %>%
mutate(
pred=with(as.list(coef(fit)),expit(a+b*carapace.length)),
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1_fit <- filter(gt1, out.of.fit==FALSE)
gt1_newtest <- filter(gt1, out.of.fit==TRUE)
gt1 %>%
mutate(
out.of.fit=(carapace.length %% 2 == 0)
) -> gt1
gt1_train <- filter(gt1, out.of.fit==FALSE)
gt1_newtest <- filter(gt1, out.of.fit==TRUE)
fit_train <- mle2(nll,start=list(a=0,b=0),data=gt1_train)
fit_newtest <- mle2(nll,start=list(a=0,b=0),data=gt1_newtest)
gt1_newtest %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=with(as.list(coef(fit)),expit(a+b*carapace.length))),color='black') + theme_bw() + geom_line(aes(y=pred),color='black') + facet_grid(~out.of.fit,labeller=label_both) -> pl
pl
gt1_newtest %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=with(as.list(coef(fit_train)),expit(a+b*carapace.length))),color='black') + theme_bw() + geom_line(aes(y=pred),color='black') + facet_grid(~out.of.fit,labeller=label_both) -> pl
pl
gt1_newtest %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=with(as.list(coef(fit_train)),expit(a+b*carapace.length))),color='black') + theme_bw()
gt1_newtest %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=with(as.list(coef(fit_train)),expit(a+b*carapace.length))),color='black') + theme_bw() -> pl
pl
gt1 %>%
mutate(
out.of.fit=(carapace.length %% 2 == 0),
fitted=with(as.list(coef(fit_train)),expit(a+b*carapace.length)),
pred=with(as.list(coef(fit_newtest)),expit(a+b*carapace.length))
) -> gt1
gt1_newtest %>%
ggplot(aes(x=carapace.length))+
geom_jitter(aes(y=serostatus, color=elisa),height=0.05,width=0)+
geom_line(aes(y=with(as.list(coef(fit_train)),expit(a+b*carapace.length))),color='black') + theme_bw() -> pl
pl
pl
gt1 %>%
ggplot(mapping=aes(x=pred,y=fitted))+
geom_point()+
facet_grid(~out.of.fit,labeller=label_both)+
geom_abline(intercept=0,slope=1)+theme_bw() -> pl2
pl2
gt1 %>%
ggplot(mapping=aes(x=pred,y=fitted))+
geom_point()+
geom_abline(intercept=0,slope=1)+theme_bw() -> pl2
pl2
pl2
gt1 %>%
group_by(out.of.fit) %>%
summarize(
R2=1-sum((fitted-pred)^2)/sum((fitted-mean(fitted))^2)
)
pl2
gt1 %>%
group_by(out.of.fit) %>%
summarize(
R2=1-sum((fitted-pred)^2)/sum((fitted-mean(fitted))^2)
)
packages <- c("shiny", "tidyverse", "ggplot2", "pROC", "wesanderson", "gtable", "gridExtra", "plyr", "reshape2")
install.packages(packages)
lapply(packages, library, character.only = TRUE)
runGitHub("PolioBenchmarking_Shiny", "andrewvalesano")
library(tidyverse)
var <- read_csv("/Users/avalesano/Documents/MSTP/LauringLab/Host_level_IBV_evolution/data/processed/qual.snv.csv")
var
filter(var, chr == "HA")
var <- filter(var, freq.var < 0.98)
var
var <- filter(var, chr == "HA")
var
var$class_factor
var <- filter(var, class_factor == "Nonsynonymous")
var
View(var)
var <- read_csv("/Users/avalesano/Documents/MSTP/LauringLab/Host_level_IBV_evolution/data/processed/qual.snv.csv")
var <- filter(var, freq.var < 0.98)
var <- filter(var, chr == "HA")
var
hist(var$pos)
ggplot(var, aes(pos)) + geom_histogram(binwidth = 1)
ggplot(var, aes(pos)) + geom_histogram(binwidth = 1) + theme_minimal()
ggplot(var, aes(pos)) + geom_histogram(binwidth = 1, fill = "red") + theme_minimal()
library(shiny)
runGitHub("PolioBenchmarking_Shiny", "andrewvalesano")
runGitHub("PolioBenchmarking_Shiny", "andrewvalesano")
library(tidyverse)
library(wesanderson)
library(bbmle)
library(HIVEr)
detach(package:plyr)
detach(package::plyr)
palette <- wes_palette("Darjeeling1")
setwd("/Users/avalesano/Documents/MSTP/LauringLab/Host_level_IBV_evolution/scripts/")
meta_long <- read_csv("../data/metadata/flu_b_2010_2017_v4LONG_withSeqInfo_gc.csv")
possible_pairs_dist <- read_csv("../data/processed/possible.pairs.dist.csv")
transmission_pairs <- read_csv("../data/processed/transmission_pairs.csv")
transmission_freqs <- read_csv("../data/processed/trans_freq.csv")
transmission_freqs_poly_in_donor <- read_csv("../data/processed/transmission_pairs_freq.poly_donor.csv")
transmission_freqs_no_cut <- read_csv("../data/processed/no_cut_trans_freq.csv")
transmission_freqs_no_cut_poly_in_donor <- read_csv("../data/processed/no_cut_transmission_pairs_freq.poly_donor.csv")
sessionInfo()
### Select which dataset to use: 2% frequency cutoff or no cutoff
trans_freq.comp <- transmission_freqs_poly_in_donor
### Run the maximum likelihood optimization.
pa_total_fit <- trans_fit(trans_freq.comp, Nb_max = 100, model = "PA", threshold = NULL, acc = NULL, pair_id)
trans_freq.comp %>% group_by(pair_id) %>% summarize(donor_mutants = length(which(freq1 > 0 & freq1 < 0.5))) %>% mutate(weight_factor_kk = max(donor_mutants)/donor_mutants, weight_factor = 1) -> counts
zdpois_fit <- dist_prob_wrapper(ddist = "dzpois", params = "lambda")
dzpois_model_fit <- bbmle::mle2(minuslogl = zdpois_fit, start = list(lambda = 1), data = list(data = pa_total_fit, weight = counts))
dzpois_model_fit
### Summarize the model fit
fit <- profile(dzpois_model_fit)
fit
con_int <- confint(dzpois_model_fit)
AIC(dzpois_model_fit)
summary(dzpois_model_fit)
w <- 0.05
step <- 0.025
windows <- tibble(s = seq(0.02, 1-w, by = step), end = s + w)
windows %>% rowwise() %>%
mutate(iSNV = nrow(filter(trans_freq.comp, freq1 >= s, freq1 < end)),
transmitted = nrow(filter(trans_freq.comp, freq1 >= s, freq1 < end, found == TRUE)),
freq = mean(trans_freq.comp$freq1[which(trans_freq.comp$freq1 >= s & trans_freq.comp$freq1 < end)]),
prob = transmitted/iSNV,
error_bottom = qbinom(c(0.025), iSNV, prob)/iSNV,
error_top = qbinom(c(0.975), iSNV, prob)/iSNV,
many = iSNV > 5) -> out
out
if(any(grepl("package:plyr", search()))) detach("package:plyr") else message("plyr not loaded")
library(tidyverse)
library(wesanderson)
library(bbmle)
library(HIVEr)
palette <- wes_palette("Darjeeling1")
setwd("/Users/avalesano/Documents/MSTP/LauringLab/Host_level_IBV_evolution/scripts/")
meta_long <- read_csv("../data/metadata/flu_b_2010_2017_v4LONG_withSeqInfo_gc.csv")
possible_pairs_dist <- read_csv("../data/processed/possible.pairs.dist.csv")
transmission_pairs <- read_csv("../data/processed/transmission_pairs.csv")
transmission_freqs <- read_csv("../data/processed/trans_freq.csv")
transmission_freqs_poly_in_donor <- read_csv("../data/processed/transmission_pairs_freq.poly_donor.csv")
transmission_freqs_no_cut <- read_csv("../data/processed/no_cut_trans_freq.csv")
transmission_freqs_no_cut_poly_in_donor <- read_csv("../data/processed/no_cut_transmission_pairs_freq.poly_donor.csv")
# ================== Quick and Dirty: Use all of JT's support functions in HIVEr/transmission_models.R to do PA model for qual SNV. =========================
### Select which dataset to use: 2% frequency cutoff or no cutoff
trans_freq.comp <- transmission_freqs_poly_in_donor
#trans_freq.comp <- transmission_freqs_no_cut_poly_in_donor
### Run the maximum likelihood optimization.
pa_total_fit <- trans_fit(trans_freq.comp, Nb_max = 100, model = "PA", threshold = NULL, acc = NULL, pair_id)
trans_freq.comp %>% group_by(pair_id) %>% summarize(donor_mutants = length(which(freq1 > 0 & freq1 < 0.5))) %>% mutate(weight_factor_kk = max(donor_mutants)/donor_mutants, weight_factor = 1) -> counts
zdpois_fit <- dist_prob_wrapper(ddist = "dzpois", params = "lambda")
dzpois_model_fit <- bbmle::mle2(minuslogl = zdpois_fit, start = list(lambda = 1), data = list(data = pa_total_fit, weight = counts))
### Summarize the model fit
fit <- profile(dzpois_model_fit)
plot(fit)
library(tidyverse)
library(wesanderson)
library(bbmle)
library(HIVEr)
set.seed(42)
palette <- wes_palette("Darjeeling1")
setwd("/Users/avalesano/Documents/MSTP/LauringLab/Host_level_IBV_evolution/scripts/")
meta_long <- read_csv("../data/metadata/flu_b_2010_2017_v4LONG_withSeqInfo_gc.csv")
possible_pairs_dist <- read_csv("../data/processed/possible.pairs.dist.csv")
transmission_pairs <- read_csv("../data/processed/transmission_pairs.csv")
transmission_freqs <- read_csv("../data/processed/trans_freq.csv")
transmission_freqs_poly_in_donor <- read_csv("../data/processed/transmission_pairs_freq.poly_donor.csv")
transmission_freqs_no_cut <- read_csv("../data/processed/no_cut_trans_freq.csv")
transmission_freqs_no_cut_poly_in_donor <- read_csv("../data/processed/no_cut_transmission_pairs_freq.poly_donor.csv")
# ================== Quick and Dirty: Use all of JT's support functions in HIVEr/transmission_models.R to do PA model for qual SNV. =========================
### Select which dataset to use: 2% frequency cutoff or no cutoff
trans_freq.comp <- transmission_freqs_poly_in_donor
#trans_freq.comp <- transmission_freqs_no_cut_poly_in_donor
### Run the maximum likelihood optimization.
pa_total_fit <- trans_fit(trans_freq.comp, Nb_max = 100, model = "PA", threshold = NULL, acc = NULL, pair_id)
trans_freq.comp %>% group_by(pair_id) %>% summarize(donor_mutants = length(which(freq1 > 0 & freq1 < 0.5))) %>% mutate(weight_factor_kk = max(donor_mutants)/donor_mutants, weight_factor = 1) -> counts
zdpois_fit <- dist_prob_wrapper(ddist = "dzpois", params = "lambda")
dzpois_model_fit <- bbmle::mle2(minuslogl = zdpois_fit, start = list(lambda = 1), data = list(data = pa_total_fit, weight = counts))
dzpois_model_fit
### Summarize the model fit
fit <- profile(dzpois_model_fit)
fit
con_int <- confint(dzpois_model_fit)
detact(package:wesanderson)
detach(package:wesanderson)
detach(package:plyr)
